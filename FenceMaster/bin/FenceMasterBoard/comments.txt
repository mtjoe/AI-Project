AI Project 1

Members:
 - Erlangga Satria Gama (570748)
 - Marisa Tjoe (566322)

Description:
____________

The purpose of this program is to check whether there is a winner in a given Fence Master Board. It checks the presense of a loop and a tripod seperately. The first line of the input should be the size of the sides of the board, this value will be read, and an Object of type 'Board' will be formed.

Classes:
 - Main.java
 	- Contains the main function, and also a private function 'readInput' that takes in the user input and initializes the Board.
 - Board.java
 	- The Board comes in the form of a 2-D ArrayList of Position Objects, to represent each slot in the Board.
 - Position.java
 	- Correspond to a slot in a board. The objects of Type Board consist of many different positions.
 - Player.java
 	- This player class represents the players in the game. each player will have a short name and a full name
 - CheckLogic.java (interface)
 - TripodCheck.java
 	- Implements Checklogic
 	- Contains algorithm to check the presence of a tripod in the board
 - LoopCheck.java
 	- Implements CheckLogic
 	- Contains algorithm to check the presence of a loop in the board


Pseudocodes:
============

	LoopCheck:
	----------

	LoopCheck():
		for p in players:
			for pos in players.getPositions:
				if pos is not visited:
					if DFS(pos, null) returns true:
						return p
		return null

	DFS(pos, prev):
		visited(pos)
		currentPath(pos)

		for n in pos.neighbors:
			if n is visited:
				if (n in currentPath) and (sizeOfLoop >= 5):
					if centerDifferent(LoopArray) returns true:
						return true;
			else:
				if DFS(n, pos) returns true:
					return true

		currentPath.remove(pos)
		return false

	centerDifferent(loopArray):

		loopArray = neatifyLoop(loopArray)

		// A HashMap that maps the row value to an ArrayList of the column values of positions 
		// in that partiular row in loopArray, left-most position on the start of the ArrayList
		set up rowCurrentPath

		for row in rowCurrentPath:
			if not top-most or bottom-most row in the loop:
				if there is an empty position or a Position occupied by a different player -
						- in the middle of the left-most loop position and the next loop position in that row:
					return true
		return false

	neatifyLoop(loopArray):
		nCurr = 2

		while nCurr not equal to size of loopArray:
			while loopArray[nCurr] and loopAray[nCurr-2] is adjacent:
				// Remove Position in the middle of the two positions, not necessary to form a loop
				remove loopArray[nCurr-1] from loopArray 	
				nCurr--
			nCurr++

		return loopArray

	LoopCheck time complexity: O(b^n)
	n is the total number of positions in the board, b is the branching factor each position (max 6). 
	The worst case scenario is if the whole board is filled except for 1 (if full, draw), hence n nodes to be checked. 
	So, for every node occupied, all their neighbours need to be checked, regardless of whether they are visited (might 
	be loop, need to check for centerDifferent()), or not visited (another round of DFS). Therefore, the time complexity 
	is O(b^n)


	TripodCheck:
	------------

	getCurrentFromQueue():
		if queue is not empty :
			set current as the last element in queue
			return current
		else 
			return null

	checkCurrent(neighbors, current):
		if neighbors has not been visited s
			add neigbors to visited 

			if neighbors is the edge and non-corner

				if neighbors is in the same edge as current 

					if current is in the edge
						set result as neighbors 

					else 
						set result by calling getCurrentFromQueue

				else 
					tripod set to add by 1
					add neighbors edge to visitedEdge

					if tripod is equal to minimTripod
						set result to null

					else 
						set result by calling getCurrentFromQueue
			else 
				set result to neighbors
		
		return result 

	 

	runDFS(pos):
		while current is not null and tripod is not 3

			set numLoop to 3
			add current to visited

			set neighborsArray by calling current.getSameNeighbors(before)

			if the size of neighborsArray is equal to 1
				set neighborPoint to neighborsArray[0]
				set currentBe by calling checkCurrent(neighborPoint, current)

			else if the size of neighborsArray is bigger than 1

				if queue does not contain current
					put current in queue
				else 
					remove current from queue
				 

				for neighbors in neighborsArray:
					set currentBe by calling checkCurrent(neighbors, current)
					numLoop add by 1

					if currentBe is not equal to current 
						break

					else if currentBe is equal to current and numLoop is equal to 
									the size of neighborsArray

						if queue contains currentBe
							remove currentBe from queue
						

						set currentBe by calling getCurrentFromQueue()
						break
					

			else if the size of the neighborsArray is equal to 0
				set currentBe by calling getCurrentFromQueue()

				if current is null 
					breal

			set before to current
			set current to currentBe

		if tripod is equal to 3
			return true
		else 
			return false


	check():
		for player in b.getPlayers() :
			set startingPoints to player.startingPoints
			set tripod to 1
			clear visitedEdge ArrayList
			clear visited ArrayList
			clear queue LinkedList

			for whichEdge in startingPoints:

				if visitedEdge does not contain whichEdge.getKey()

					if the size of whichEdge.getValue() is bigger than 0

						for pos in whichEdge.getValue:

							if visited does not contain pos

								if  runDFS(pos)

									return player

	Time complexity: O(b^d + c) -> in worst case

	where 	b = branching factor
		d = depth
		c = number of node with more than 1 branches
	 
	Since we have to visit any node possible in the board to check the 
	possibility of tripod. However, this algorithm allow the node 
	with more than 1 branches to be visited twice in order to check the 
	other neighbours that have not been visited.





